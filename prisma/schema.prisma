// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Wallet        Wallet[]

  // Permissions
  isAdmin       Boolean         @default(false)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Timestamp
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wallet {
  id       String  @id @default(uuid())
  name     String  @db.Char(255)
  desc     String?
  category Money   @default(BANK)
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id     String  @id @default(uuid())
  userId String
  name   String  @db.Char(255)
  desc   String?
  amount Decimal @db.Decimal(9, 2)

  savedAt   DateTime @default(now())
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionTag TransactionTag[]
}

model TransactionTag {
  id            String      @id @default(uuid())
  transactionId String
  tagId         String
  // relationals
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  Tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Tag {
  id             String           @id @default(uuid())
  name           String
  desc           String?
  transactionTag TransactionTag[]
}

enum Money {
  BANK
  CASH
  MIXS
}
